name: Semver Label Check
on: workflow_call

jobs:
  check-semver-label:
    name: Semantic Version Label Check
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check version labels
        id: check_labels
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get current version
            let currentVersion = '0.0.0';
            try {
              const { stdout } = await exec.getExecOutput('git describe --tags --abbrev=0');
              if (stdout.trim()) {
                currentVersion = stdout.trim().replace('v', '');
              }
            } catch (error) {
              console.log('No tags found, using default version 0.0.0');
            }

            console.log(`Current version: ${currentVersion}`);
            const [major, minor, patch] = currentVersion.split('.').map(Number);

            const response = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const versionLabels = ['patch', 'minor', 'major'];
            const foundVersionLabels = response.data
              .map(label => label.name)
              .filter(name => versionLabels.includes(name));

            // Remove any existing version-related status comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            for (const comment of comments.data) {
              if (comment.body.includes('### Version Label Status')) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id
                });
              }
            }

            // Calculate next version based on label
            function getNextVersion(type) {
              switch(type) {
                case 'major':
                  return `${major + 1}.0.0`;
                case 'minor':
                  return `${major}.${minor + 1}.0`;
                case 'patch':
                  return `${major}.${minor}.${patch + 1}`;
                default:
                  return currentVersion;
              }
            }

            // Build status message
            let status = '### Version Label Status\n\n';
            let shouldFail = false;

            if (foundVersionLabels.length === 0) {
              status += '❌ **Error:** No version label found!\n\n' +
                       'This PR requires exactly one of the following labels:\n' +
                       '- `patch`: backwards-compatible bug fixes\n' +
                       '- `minor`: backwards-compatible features\n' +
                       '- `major`: breaking changes\n\n' +
                       'Please add one label to specify the type of version change.';
              shouldFail = true;
            } else if (foundVersionLabels.length > 1) {
              status += '❌ **Error:** Multiple version labels detected!\n\n' +
                       `Found labels: ${foundVersionLabels.join(', ')}\n\n` +
                       'Please remove all but one version label. ' +
                       'Only one version type is allowed per PR.';
              shouldFail = true;
            } else {
              const nextVersion = getNextVersion(foundVersionLabels[0]);
              status += `✅ **Success:** Valid version label found: \`${foundVersionLabels[0]}\`\n\n` +
                       'This PR will trigger a version increment when merged:\n' +
                       `\`v${currentVersion}\` → \`v${nextVersion}\`\n\n`;
              
              // Add explanation of the change
              switch(foundVersionLabels[0]) {
                case 'major':
                  status += '- **Major** version increment (breaking changes)';
                  break;
                case 'minor':
                  status += '- **Minor** version increment (new features, backwards compatible)';
                  break;
                case 'patch':
                  status += '- **Patch** version increment (bug fixes, backwards compatible)';
                  break;
              }
            }

            // Post status as comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: status
            });

            // Set check conclusion
            if (shouldFail) {
              core.setFailed('Invalid version labeling');
            }
